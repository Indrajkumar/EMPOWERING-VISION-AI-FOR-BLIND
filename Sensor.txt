#!/usr/bin/python
import RPi.GPIO as GPIO
import time
import os
import telepot

bot=telepot.Bot('5990921924:AAH8lMEnN290WayXnDl6mMDoxfaC9GIQICc')
#GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)
 
#set GPIO Pins
GPIO_TRIGGER = 26
GPIO_ECHO = 19


GPIO_TRIGGER1 = 2
GPIO_ECHO1 = 3

GPIO_TRIGGER2 =4
GPIO_ECHO2 = 17
buzzer=13

switch = 27
moister = 6
#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)


GPIO.setup(GPIO_TRIGGER1, GPIO.OUT)
GPIO.setup(GPIO_ECHO1, GPIO.IN)


GPIO.setup(GPIO_TRIGGER2, GPIO.OUT)
GPIO.setup(GPIO_ECHO2, GPIO.IN)


GPIO.setup(13,GPIO.OUT)
GPIO.setup(6,GPIO.IN)
##GPIO.setup(12,GPIO.IN)
GPIO.setup(27, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.output(buzzer, False)

def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)
 
    StartTime = time.time()
    StopTime = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()
 
    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2
 
    return distance


def distance1():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER1, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER1, False)
 
    StartTime = time.time()
    StopTime = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO1) == 0:
        StartTime = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO1) == 1:
        StopTime = time.time()
 
    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance1 = (TimeElapsed * 34300) / 2
 
    return distance1


def distance2():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER2, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER2, False)
 
    StartTime = time.time()
    StopTime = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO2) == 0:
        StartTime = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO2) == 1:
        StopTime = time.time()
 
    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance2 = (TimeElapsed * 34300) / 2
 
    return distance2



while True:  

    dist = distance()
    print ("Measured Distance at left= %.1f cm" % dist)
    time.sleep(0.1)

    if dist < 20:
        print('left object detected ')
        os.system("mpg321 /home/pi/Desktop/Project_Blind/ls.mp3")
        


    dist1 = distance1()
    print ("Measured Distance at right = %.1f cm" % dist1)
    time.sleep(0.1)

    if dist1 < 20:
        print('right object detected ')
        os.system("mpg321 /home/pi/Desktop/Project_Blind/rs.mp3")

        
    dist2 = distance2()
    print ("Measured Distance at front = %.1f cm" % dist2)
    time.sleep(0.1)


    if dist2 < 20:
        print('front object detected ')
        os.system("mpg321 /home/pi/Desktop/Project_Blind/fs.mp3")
##        

        
    print ("--------------------------------------------")
    time.sleep(1)

    if(GPIO.input(switch)==False):
        print('PERSON IS IN EMERGENCY')
        GPIO.output(buzzer, True)
        bot.sendMessage('1185987113',str('THE PERSON IS IN EMERGENCY'))
        time.sleep(1)
        GPIO.output(buzzer, False)

    if(GPIO.input(moister)==False):
        print('wet surface detected')
        os.system("mpg321 /home/pi/Desktop/Project_Blind/mos.mp3")
        GPIO.output(buzzer, True)
        time.sleep(1)
        GPIO.output(buzzer, False)



        


